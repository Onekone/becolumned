<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg = 0;
al = 0;
sc = 0;
Score = 9999999;

levels = irandom(20);

w = 700; h = 700;

_m = 1.33-bg*0.33
_x = 1920/2-w/2-71;
_y = 1080/2-h/2-71;
_w = w*_m; _h = h*_m;

maximum = 0;

timer = '0:00';
bestMove = 0;
cascade = 0;
chain = 0;

with obj_grid bgFadeTarget = 0;

for(i=0;i&lt;levels;i++){
    NormalScore[i] = irandom(5000);
    MatchesScore[i] = irandom(5000);    
    ColorScore[i] = irandom(5000);
    ChainScore[i] = irandom(5000);
    CascadeScore[i] = irandom(5000);
    maximum = max(maximum,MatchesScore[i]+NormalScore[i]+ColorScore[i]+ChainScore[i]+CascadeScore[i])
}

action = noone;
pressed = noone;
released = noone;
hovering = noone;
prev_hovering = noone;

keyboard_select = noone;

prev_mx = mouse_x;
prev_my = mouse_y;

 i = 0;
 button[i,0] = _x-169+w/2; button[i,1] = _y+102+h; button[i,2] = 175; button[i,3] = 54; button[i,4] = 0; i++;
 button[i,0] = _x+71+w/2;  button[i,1] = _y+102+h; button[i,2] = 190; button[i,3] = 68; button[i,4] = 0; i++;
 button[i,0] = _x+311+w/2; button[i,1] = _y+102+h; button[i,2] = 175; button[i,3] = 54; button[i,4] = 0; i++;

 
    for(i=0;i&lt;8;i++)
     for(j = 3; j&gt;=0; j--) {
       if ( global.badges[i,1] &gt;= global.benchmark[i,j] 
        &amp;&amp; global.badges[i,0] &lt; j) { i = instance_create(x,y,obj_badges); visible=false; exit; } }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg = lerp(bg,1,0.08)
al = max(bg,al);
sc = min(sc+0.0825,1);

_m = 1.33-bg*0.33

_w = w*_m; _h = h*_m;
_x = 1920/2-_w/2-71;
_y = 1080/2-_h/2-71;

/**

draw_small_button(_x+71+_w/2-240*_m,_y+102*_m+_h,'BADGES',175*_m,0);
draw_large_button(_x+71+_w/2,_y+102*_m+_h,'PLAY AGAIN',190*_m,0);
draw_small_button(_x+71+_w/2+240*_m,_y+102*_m+_h,'MAIN MENU',175*_m,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mb_l = mouse_check_button_pressed(mb_left); mb_l_r = mouse_check_button_released(mb_left);
hovering = noone;

for(i=0;i&lt;3;i++) {
 hovered = in_range(mouse_x,button[i,0]-button[i,2]/2,button[i,0]+button[i,2]/2) &amp;&amp; in_range(mouse_y,button[i,1]-button[i,3]/2,button[i,1]+button[i,3]/2);
 if (hovered) {
    hovering = i;
    keyboard_select = noone;
 }
 button[i,4] = hovered;
 if (mb_l &amp;&amp; hovered) {
    pressed = i; 
    audio_stop_sound(snd_button_press); 
    audio_play_sound(snd_button_press,0,0);
 }
 if (mb_l_r &amp;&amp; hovered) {
    released = i; 
 }
}
  
if (prev_hovering != hovering and hovering &gt;= 0 and pressed == noone) {
    audio_stop_sound(snd_button_hover);
    audio_play_sound(snd_button_hover,0,0);
}
prev_hovering = hovering;
  
if pressed&gt;=0 and hovering==pressed and mouse_check_button(mb_left) {
    button[pressed,4] = 2;
}
    
if pressed == released and pressed != noone {
    action = pressed; 
    pressed = noone; 
    released = noone;
} else {
    released = noone;
}

if hovering == noone {
    if keyboard_check_pressed(vk_left) {
        keyboard_select = clamp(keyboard_select-1,0,2)
    }
    if keyboard_check_pressed(vk_right) {
        keyboard_select = clamp(keyboard_select+1,0,2)
    }
    if keyboard_check_pressed(vk_space) {
        audio_stop_sound(snd_button_press);
        audio_play_sound(snd_button_press,0,0);
        action = keyboard_select;
    }
    if keyboard_select &gt;= 0
        button[keyboard_select,4] = 1;
}

if action != noone {
    audio_stop_sound(snd_button_release);
    audio_play_sound(snd_button_release,0,0);
    switch action {
        case 0: p=instance_create(x,y,obj_badges); p.al=1; visible=false; al=1; bg=0; break;
        case 1: room_restart(); break;
        case 2: p = instance_create(x,y,obj_transition);
                p.goto = room_mainmenu;
                p.song = 'main_menu.it';
        break;
    }
}

action = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(al*0.77)
c = $502828;
draw_rectangle_colour(0,0,1920,1080,c,c,c,c,0)
draw_set_alpha(1)

draw_nine(ui_gameover_plague,_x-71,_y-71,_w,_h,142);
draw_sprite_ext(ui_gameover_stamp,0,_x+_w/2+71,_y,_m,_m,0,c_white,1);

draw_set_halign(fa_center); draw_set_valign(fa_top); 
draw_set_font(fontMedium);
draw_text_transformed_colour(_x+_w/2+73,_y+2,'Final Score',_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+_w/2+71,_y,'Final Score',_m,_m,0,c_white,c_white,c_white,c_white,1);
draw_set_font(titleFont);
draw_text_transformed_colour(_x+_w/2+73,_y+42,round(Score*sc),_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+_w/2+71,_y+40,round(Score*sc),_m,_m,0,c_white,c_white,c_white,c_white,1);

__h = _h*0.15;

draw_nine(ui_lightbox,_x,            _y+140*_m,_w*0.45-77,_h*0.15*_m,77)
draw_nine(ui_lightbox,_x+_w*0.525+77,_y+140*_m,_w*0.45-77,_h*0.15*_m,77)

t1 = '' t2 = '';

for(i=0;i&lt;5;i++) {
t1 += string(i+1)+'. '+highscore_name(i+1)+'#'
t2 += string(highscore_value(i+1))+'#'
}

draw_set_valign(fa_middle); draw_set_font(font0);
draw_set_halign(fa_right); 

t = string(bestMove)+'#'+string(chain)+'#'+string(cascade)+'#'+string(timer);
draw_text_transformed_colour(_x+_w*0.45+78-12*_m+2,_y+217*_m+2+__h/2  ,t,_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+_w*0.45+78-12*_m,  _y+217*_m  +__h/2,t,_m,_m,0,c_white,c_white,c_white,c_white,1);

draw_text_transformed_colour(_x+_w*0.45+78+_w*0.525+77-12*_m+2,_y+217*_m+2+__h/2  ,t2,_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+_w*0.45+78+_w*0.525+77-12*_m,  _y+217*_m+__h/2,t2,_m,_m,0,c_white,c_white,c_white,c_white,1);

draw_set_halign(fa_left); 

t = 'Best Move#Longest Chain#Biggest Cascade#Total Time';
draw_text_transformed_colour(_x+12*_m+2,_y+217*_m+2+__h/2  ,t,_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+12*_m,  _y+217*_m+__h/2,t,_m,_m,0,c_white,c_white,c_white,c_white,1);

draw_text_transformed_colour(_x+_w*0.525+77+12*_m+2,_y+217*_m+2+__h/2  ,t1,_m,_m,0,0,0,0,0,0.75);
draw_text_transformed_colour(_x+_w*0.525+77+12*_m,  _y+217*_m+__h/2,t1,_m,_m,0,c_white,c_white,c_white,c_white,1);

__x = _x;
__y = _y+294*_m+__h;
draw_nine(ui_darkbox,_x,_y+294*_m+__h,_w,_h*0.3,77);

draw_set_valign(fa_middle)
draw_set_halign(fa_right) draw_set_font(font0)

for(i=0;i&lt;5;i++) {
_y1 =__y+77*_m+_h*(0.25*(i/4+0.25));
draw_line_width_colour(__x+100*_m,_y1,__x+100*_m+_w,_y1,3,c_yellow,c_yellow);
t = floor((1-i/4)*maximum);
if t&gt;=10000 { t = string(t div 1000)+'k'}
draw_text_colour( __x+90*_m,_y1,t,c_white,c_white,c_white,c_white,1);
}

draw_set_font(font0)
draw_set_valign(fa_middle)
draw_set_halign(fa_left)
draw_circle_colour(__x+20+_w*0.1,__y+44,12,c_fuchsia,c_fuchsia,0)
draw_text_colour(__x+40+_w*0.1,__y+44,'Base',c_white,c_white,c_white,c_white,1)
draw_circle_colour(__x+20+_w*0.3,__y+44,12,c_orange,c_orange,0)
draw_text_colour(__x+40+_w*0.3,__y+44,'Matches',c_white,c_white,c_white,c_white,1)
draw_circle_colour(__x+20+_w*0.5,__y+44,12,c_yellow,c_yellow,0)
draw_text_colour(__x+40+_w*0.5,__y+44,'Color',c_white,c_white,c_white,c_white,1)
draw_circle_colour(__x+20+_w*0.7,__y+44,12,c_aqua,c_aqua,0)
draw_text_colour(__x+40+_w*0.7,__y+44,'Chains',c_white,c_white,c_white,c_white,1)
draw_circle_colour(__x+20+_w*0.9,__y+44,12,c_lime,c_lime,0)
draw_text_colour(__x+40+_w*0.9,__y+44,'Cascades',c_white,c_white,c_white,c_white,1)

draw_set_valign(fa_top)
draw_set_halign(fa_center) 

maximum = 0;
for(i=0;i&lt;levels;i++) {
    maximum = max(maximum,NormalScore[i]+MatchesScore[i]+ColorScore[i]+ChainScore[i]+CascadeScore[i]);
}
for(i=0;i&lt;levels;i++) {
_y1 = __y+77*_m+_h*(0.0625); _y2 = __y+77*_m+_h*(0.3125);
    
    t=0;
    draw_rectangle_colour(__x+100*_m+_w*(i+0.1)/levels,lerp(_y2,_y1,t/maximum),__x+100*_m+_w*(i+0.9)/levels,-2+lerp(_y2,_y1,(t+NormalScore[i]*bg)/maximum),c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,0)  t+=NormalScore[i]*bg;            
    draw_rectangle_colour(__x+100*_m+_w*(i+0.1)/levels,lerp(_y2,_y1,t/maximum),__x+100*_m+_w*(i+0.9)/levels,-2+lerp(_y2,_y1,(t+MatchesScore[i]*bg)/maximum),c_orange,c_orange,c_orange,c_orange,0)  t+=MatchesScore[i]*bg;                
    draw_rectangle_colour(__x+100*_m+_w*(i+0.1)/levels,lerp(_y2,_y1,t/maximum),__x+100*_m+_w*(i+0.9)/levels,-2+lerp(_y2,_y1,(t+ColorScore[i]*bg)/maximum),c_yellow,c_yellow,c_yellow,c_yellow,0) t+=ColorScore[i]*bg;
    draw_rectangle_colour(__x+100*_m+_w*(i+0.1)/levels,lerp(_y2,_y1,t/maximum),__x+100*_m+_w*(i+0.9)/levels,-2+lerp(_y2,_y1,(t+ChainScore[i]*bg)/maximum),c_aqua,c_aqua,c_aqua,c_aqua,0) t+=ChainScore[i]*bg;
    draw_rectangle_colour(__x+100*_m+_w*(i+0.1)/levels,lerp(_y2,_y1,t/maximum),__x+100*_m+_w*(i+0.9)/levels,-2+lerp(_y2,_y1,(t+CascadeScore[i]*bg)/maximum),c_lime,c_lime,c_lime,c_lime,0) t+=CascadeScore[i]*bg;
    
    draw_text_colour( __x+100*_m+_w*(i+0.5)/levels,_y2,'x'+string(i+1),c_white,c_white,c_white,c_white,1);
}

draw_small_button(_x+71+_w/2-240*_m,_y+102*_m+_h,'BADGES',175*_m,   button[0,4]);
draw_large_button(_x+71+_w/2,_y+102*_m+_h,'PLAY AGAIN',190*_m,      button[1,4]);
draw_small_button(_x+71+_w/2+240*_m,_y+102*_m+_h,'MAIN MENU',175*_m,button[2,4]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
