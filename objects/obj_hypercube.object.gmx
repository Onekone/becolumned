<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>processed = 0;

color = -1;

grid = noone;
gemI = 0;
gemListSize = 0;

timer = 6;

size = 80;

scoreCounter  = instance_create(x,y,tooltip_score);
                scoreCounter.c = 0;
                scoreCounter.text = 0;
                scoreCounter.rainbow = true;
                
global.badges[1,1]++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HOLDING ONTO SHIT

if !instance_exists(grid) {
    instance_destroy(); 
    exit;
}

with obj_grid pauseTimer = max(pauseTimer,6);
with obj_quest { if other.grid == grid and timer&gt;0 timer++;}
with obj_gem { if other.grid == grid stop = 6; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>grid.paused</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(grid) {
    instance_destroy(); 
    exit;
}

with obj_grid {
    bgFade = lerp(bgFade,1,0.08);
}

t = (grid.multiplier+1) * (grid.level+1)

if !processed {
    effect_create_above(ef_ring,x + size/2,y + size/2,1,c_aqua);
    with obj_gem { 
        if (color==other.color and grid == other.grid) {
            other.trail[other.gemListSize+1,0] = x + size/2;
            other.trail[other.gemListSize+1,1] = y + size/2;        
            other.gemList[other.gemListSize++] = id;
        }
    }
    trail[0,0] = x + size/2;    
    trail[0,1] = y + size/2;
    processed = true;
} else {
    if timer--&lt;=0 {
        if !instance_exists(scoreCounter) {
            scoreCounter  = instance_create(x,y,tooltip_score);
                    scoreCounter.c = 0;
                    scoreCounter.text = 0;
                    scoreCounter.rainbow = true;
        }
        audio_play_sound(snd_hypercube_blam,0,0);
        timer = irandom(12);
        if gemI&lt;gemListSize {

            scoreCounter.text += 10 * t;
            grid.Score += 10 *t;
            scoreCounter.timer = 90;
            grid._stat_powerGems[grid.level] += 10  * (grid.multiplier+1) * (grid.level+1);
            grid.breakdown = true;
            grid.chainCount = true;
            grid.gemsTotal++;
            c = grid.colorPalleteI[color];
            
            t = gemList[gemI];           
            effect_create_above(ef_ring,t.x + t.size/2,t.y + t.size/2,2, c);
            
            grid.lockHeight[t.gridX] = max(
            grid.lockHeight[t.gridX], 
            t.gridY)
            
            instance_destroy(gemList[gemI++]);
            grid.gems++;
        } else {
        if gemListSize&lt;=0 {

            scoreCounter.text = 10000 * t;
            grid.Score += 10000 * t;
            scoreCounter.timer = 90;
            grid._stat_powerGems[grid.level] += 10000  * (grid.multiplier+1) * (grid.level+1);
        }

        instance_destroy();
        }
    };
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_stretched_ext(sprite1,image_index,x,y,size,size,image_blend,1);
draw_sprite_ext(sprite2,image_index,x+size/2,y+size/2,size/160,size/160,0,c_white,image_alpha);

if processed {
    for(i=1;i&lt;=gemI;i++) {
        p = point_distance(trail[i-1,0],trail[i-1,1],trail[i,0],trail[i,1]);
        a = point_direction(trail[i-1,0],trail[i-1,1],trail[i,0],trail[i,1]);
        draw_sprite_ext(sprite27,image_index/4,trail[i-1,0],trail[i-1,1],p/128,1,a,grid.colorPallete[color],1);
    }
    if gemI&lt;gemListSize {
    draw_circle_colour(gemList[gemI].x+gemList[gemI].size/2,gemList[gemI].y+gemList[gemI].size/2,24,grid.colorPallete[color],grid.colorPallete[color],0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
