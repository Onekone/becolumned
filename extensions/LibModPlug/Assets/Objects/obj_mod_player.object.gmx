<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Instance variables
snd_queue = noone;
buffer_mod = noone;
buffer_mod_address = 0;
buffer_mod_size = 0;
playing = false;
end_reached = true;

// Local variables
var i;

// Buffer size in the dll is 760, so we need to match that
buffer_size = 760; // this used to be 16384 in version 1.0 of the extension, smaller buffers even out fps

// The number of audio buffers
buffer_count = 20;

// Buffer index is used to keep track of current buffer to fill / add to queue
buffer_index = 0;

// Sample rate of mod playback
sample_rate = 44100;

// Create the audio buffers
for(i=0; i&lt;buffer_count; i++)
{
  buf[i] = buffer_create(buffer_size, buffer_fixed, 2);
  buf_pointer[i] = string(buffer_get_address(buf[i])); 
  buffer_fill(buf[i], 0, buffer_u8, 0, buffer_size);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// The following is a check to refill audio buffers
// if playing has stopped unexpectedly from moving
// the main window in Windows etc.
if(playing &amp;&amp; !end_reached &amp;&amp; !audio_is_playing(snd_queue))
{
  var bytesReturned = 0;
  
  // Fill all the audio buffers with song data and add to queue
  for(i=0; i&lt;buffer_count; i++) {
    bytesReturned = ModPlug_Read(buf_pointer[i]);
    if(bytesReturned == 0) {
      end_reached = true;
      break;
    }
    else
      audio_queue_sound(snd_queue, buf[i], 0, bytesReturned);
  }
  // Play the queue
  audio_play_sound(snd_queue, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fill an audio buffer and add it to the queue

if(playing &amp;&amp; !end_reached)
{
  // Fill the buffer with audio data
  var bytesReturned = ModPlug_Read(buf_pointer[buffer_index]);
  
  // Add the buffer to the queue
  if(bytesReturned &gt; 0)
  {
    audio_queue_sound(snd_queue, buf[buffer_index], 0, bytesReturned);
    
    // Increase the buffer index and wrap to zero if last buffer has been queued
    buffer_index++;
    if(buffer_index &gt; (buffer_count-1))
      buffer_index = 0;
  }
  else
    end_reached = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unload 
if(buffer_mod != noone) {
  ModPlug_Unload();
  buffer_delete(buffer_mod);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
